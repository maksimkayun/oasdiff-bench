package main

import (
	"fmt"
	"log"
	"os"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/tufin/oasdiff/diff"
	"github.com/tufin/oasdiff/load"
)

// Пути к файлам спецификаций OpenAPI
const (
	BaseSpecPath    = "E:\\Workspace\\openapidiff\\ghes-3.8.json"
	RevisionSpecPath = "E:\\Workspace\\openapidiff\\ghes-3.9.json"
)

func main() {
	fmt.Println("==== OAS Diff Benchmark Tool ====")

	// Проверяем аргументы командной строки
	if len(os.Args) > 1 && os.Args[1] == "advanced" {
		runAdvancedBenchmark()
	} else {
		runSimpleBenchmark()
	}
}

func runSimpleBenchmark() {
	fmt.Println("Starting basic OAS diff benchmark...")
	fmt.Printf("Comparing:\n  Base: %s\n  Revision: %s\n\n", BaseSpecPath, RevisionSpecPath)

	// Загружаем спецификации
	fmt.Println("Loading specifications...")
	loadStart := time.Now()
	
	// Создаем загрузчик для OpenAPI спецификаций
	loader := openapi3.NewLoader()
	
	// Загрузка базовой спецификации
	baseSpec, err := load.NewSpecInfo(loader, load.NewSource(BaseSpecPath))
	if err != nil {
		log.Fatalf("Error loading base spec: %v", err)
	}
	
	// Загрузка новой спецификации
	revisionSpec, err := load.NewSpecInfo(loader, load.NewSource(RevisionSpecPath))
	if err != nil {
		log.Fatalf("Error loading revision spec: %v", err)
	}
	
	loadDuration := time.Since(loadStart)
	fmt.Printf("Specifications loaded in %v\n\n", loadDuration)

	// Создаем конфигурацию для diff
	config := diff.NewConfig()
	
	// Прогрев
	fmt.Println("Warming up...")
	_, _ = diff.Get(config, baseSpec.Spec, revisionSpec.Spec)
	
	// Запускаем 5 итераций для получения среднего значения
	const iterations = 5
	var totalDuration time.Duration
	
	fmt.Printf("Running %d iterations:\n", iterations)
	
	for i := 0; i < iterations; i++ {
		start := time.Now()
		
		// Сравниваем спецификации
		diffResult, err := diff.Get(config, baseSpec.Spec, revisionSpec.Spec)
		if err != nil {
			log.Printf("Error in iteration %d: %v", i+1, err)
			continue
		}
		
		iterDuration := time.Since(start)
		totalDuration += iterDuration
		
		// Подсчет изменений для текущей итерации
		changes := 0
		if diffResult != nil && diffResult.PathsDiff != nil {
			changes = countChanges(diffResult.PathsDiff)
		}
		
		// Вывод статистики итерации
		fmt.Printf("  Iteration %d: %v - Found %d changes\n", i+1, iterDuration, changes)
	}
	
	// Вывод итоговой статистики
	avgDuration := totalDuration / iterations
	fmt.Printf("\nAverage execution time: %v\n", avgDuration)
}

// Подсчет изменений в результате diff
func countChanges(pathsDiff *diff.PathsDiff) int {
	count := 0
	
	// Подсчет добавленных путей
	count += len(pathsDiff.Added)
	
	// Подсчет удаленных путей
	count += len(pathsDiff.Deleted)
	
	// Подсчет измененных путей
	for _, pathDiff := range pathsDiff.Modified {
		// Для каждого измененного пути считаем изменения в операциях
		if pathDiff.OperationsDiff != nil {
			count += len(pathDiff.OperationsDiff.Added)
			count += len(pathDiff.OperationsDiff.Deleted)
			count += len(pathDiff.OperationsDiff.Modified)
		}
	}
	
	return count
}
